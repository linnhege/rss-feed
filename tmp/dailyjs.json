{"query":{
    "count":1,
    "created":"2014-07-03T11:15:41Z",
    "lang":"nb-no",
    "diagnostics":{
        "publiclyCallable":"true",
        "url":{
            "execution-start-time":"0",
            "execution-stop-time":"31",
            "execution-time":"31",
            "content":"http://feeds.feedburner.com/dailyjs"
        },
        "user-time":"35",
        "service-time":"31",
        "build-version":"0.2.2602"
    },
    "results":{
        "feed":{
            "xmlns":"http://www.w3.org/2005/Atom",
            "feedburner":"http://rssnamespace.org/feedburner/ext/1.0",
            "title":"DailyJS",
            "link":[
                {
                    "href":"http://dailyjs.com"
                },
                {
                    "href":"http://feeds.feedburner.com/dailyjs",
                    "rel":"self",
                    "type":"application/atom+xml",
                    "atom10":"http://www.w3.org/2005/Atom"
                },
                {
                    "href":"http://pubsubhubbub.appspot.com/",
                    "rel":"hub",
                    "atom10":"http://www.w3.org/2005/Atom"
                }
            ],
            "updated":"2014-07-02T18:32:08+01:00",
            "id":"http://dailyjs.com/",
            "author":{
                "name":"DailyJS"
            },
            "info":{
                "uri":"dailyjs"
            },
            "emailServiceId":"dailyjs",
            "feedburnerHostname":"http://feedburner.google.com",
            "entry":[
                {
                    "title":"Node Roundup: SocketCluster, i18n-generator, generator-gulp-angular",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/HFdquNXLTYo/node-roundup"
                    },
                    "updated":"2014-07-02T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/07/02/node-roundup",
                    "content":{
                        "type":"html",
                        "content":"\n     <h3 id='socketcluster'>SocketCluster</h3>\n\n<p>SocketCluster (GitHub: <a href='https://github.com/topcloud/socketcluster'>TopCloud / socketcluster</a>, npm: <a href='https://www.npmjs.org/package/socketcluster'>socketcluster</a>) is a WebSocket server designed with clustering in mind. The developers have tested for memory leaks and included benchmarks. It handles client reconnection if a server crashes, and has a clustered memory store for temporary session data.</p>\n\n<blockquote>\n<p>SocketCluster lets you store session data using the socket.session object. This object gives you access to a cluster of in-memory stores called nData. You can effectively invoke any of the methods documented here to store and retrieve session data: <a href='https://github.com/topcloud/ndata'>https://github.com/topcloud/ndata</a></p>\n</blockquote>\n\n<p>Basic usage looks like this:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>SocketCluster</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;socketcluster&#39;</span><span class='p'>).</span><span class='nx'>SocketCluster</span><span class='p'>;</span>\n\n<span class='kd'>var</span> <span class='nx'>socketCluster</span> <span class='o'>=</span> <span class='k'>new</span> <span class='nx'>SocketCluster</span><span class='p'>({</span>\n  <span class='nx'>workers</span><span class='o'>:</span> <span class='p'>[</span><span class='mi'>9100</span><span class='p'>,</span> <span class='mi'>9101</span><span class='p'>,</span> <span class='mi'>9102</span><span class='p'>],</span>\n  <span class='nx'>stores</span><span class='o'>:</span> <span class='p'>[</span><span class='mi'>9001</span><span class='p'>,</span> <span class='mi'>9002</span><span class='p'>,</span> <span class='mi'>9003</span><span class='p'>],</span>\n  <span class='nx'>balancerCount</span><span class='o'>:</span> <span class='mi'>1</span><span class='p'>,</span>\n  <span class='nx'>port</span><span class='o'>:</span> <span class='mi'>8000</span><span class='p'>,</span>\n  <span class='nx'>appName</span><span class='o'>:</span> <span class='s1'>&#39;myapp&#39;</span><span class='p'>,</span>\n  <span class='nx'>workerController</span><span class='o'>:</span> <span class='s1'>&#39;worker.js&#39;</span><span class='p'>,</span>\n  <span class='nx'>rebootWorkerOnError</span><span class='o'>:</span> <span class='kc'>false</span><span class='p'>,</span>\n  <span class='nx'>addressSocketLimit</span><span class='o'>:</span> <span class='mi'>50</span>\n<span class='p'>});</span>\n</code></pre>\n</div>\n<p>The project is built with <a href='https://www.npmjs.org/package/iocluster'>iocluster</a> and <a href='https://www.npmjs.org/package/loadbalancer'>loadbalancer</a>, by the same authors.</p>\n\n<h3 id='i18ngenerator'>i18n-generator</h3>\n\n<p>i18n-generator (GitHub: <a href='https://github.com/huei90/i18n-generator'>huei90 / i18n-generator</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/i18n-generator'>i18n-generator</a>) by Huei Tan is a library for converting i18n text files into JSON.</p>\n\n<p>For example, given this input:</p>\n<div class='highlight'><pre><code class='text'>i18n=&gt; | en | zh_TW | de | my\nyou | you | 你 | Du | kamu\nI | I | 我 | ich | Saya\nlove | love | 喜歡 | liebe | cinta\neat | eat | 吃 | essen | makan\nilovegithub | i love github | 我愛 Github | ich liebe Github | Saya cinta pada Github\n</code></pre>\n</div>\n<p>It would generate this:</p>\n<div class='highlight'><pre><code class='javascript'><span class='p'>{</span><span class='s2'>&quot;you&quot;</span><span class='o'>:</span><span class='s2'>&quot;you&quot;</span><span class='p'>,</span><span class='s2'>&quot;I&quot;</span><span class='o'>:</span><span class='s2'>&quot;I&quot;</span><span class='p'>,</span><span class='s2'>&quot;love&quot;</span><span class='o'>:</span><span class='s2'>&quot;love&quot;</span><span class='p'>,</span><span class='s2'>&quot;eat&quot;</span><span class='o'>:</span><span class='s2'>&quot;eat&quot;</span><span class='p'>,</span><span class='s2'>&quot;ilovegithub&quot;</span><span class='o'>:</span><span class='s2'>&quot;i love github&quot;</span><span class='p'>}</span>\n</code></pre>\n</div>\n<p>for each language. It comes with tests and browser support.</p>\n\n<h3 id='generatorgulpangular'>generator-gulp-angular</h3>\n\n<p>I find it difficult to work on MVVM projects without some sort of build system so I can at least structure the project with CommonJS or AMD. <a href='https://github.com/Swiip/generator-gulp-angular'>generator-gulp-angular</a> gives you a Yeoman generator that uses Gulp, Bowser, and AngularJS.</p>\n\n<blockquote>\n<p>This generator aims to takes the best from others generators like generator-angular, ngTailor and generator-gulp-webapp to offers the best workflow to start an application with AngularJS powered by Gulp!</p>\n</blockquote>\n\n<blockquote>\n<p>generator-gulp-angular scaffolds out an AngularJS application with a full featured gulpfile.js which offers all the tasks for modern web development.</p>\n</blockquote>\n\n<p>It seems like a good way to get started with Gulp and AngularJS, which can actually be a little bit daunting.</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/HFdquNXLTYo\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/07/02/node-roundup"
                },
                {
                    "title":"WebRTC Video Mixing with Mixology",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/GqEOsK2oZfg/mixology"
                    },
                    "updated":"2014-07-01T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/07/01/mixology",
                    "content":{
                        "type":"html",
                        "content":"\n     <p>Gearcloud Labs has open sourced their <a href='http://gearcloudlabs.com/mixology-sdk-documentation/'>Mixology</a> project under an MIT license. The source is available on GitHub: <a href='https://github.com/gearcloudlabs/Mixology'>gearcloudlabs / Mixology</a>.</p>\n\n<p>This project allows video streams to be combined using a Node server. It uses WebRTC, the W3C standard for browser video, audio, and P2P. Google recently switched Google Hangouts over to WebRTC, which you can try in developer builds of Chrome:</p>\n\n<blockquote>\n<p>Google+ Hangouts no longer requires a separate plugin to be installed in Chrome for video and voice chat to work. Using the Web Real-Time Communication API (WebRTC) and Native Client (NaCl) Google is able to provide a native video chat experience out of the box in Chrome.</p>\n</blockquote>\n\n<ul>\n<li><a href='http://www.omgchrome.com/google-hangouts-chrome-plugin-free-2/'>Google Hangouts Plugin No Longer Needed in Chrome</a></li>\n</ul>\n\n<p>Mixology uses collections of web pages that communicate using WebRTC. There&#8217;s an additional manifest file written with JSON that defines how streams are mixed:</p>\n<div class='highlight'><pre><code class='javascript'><span class='p'>{</span>\n  <span class='s2'>&quot;channelName&quot;</span><span class='o'>:</span> <span class='s2'>&quot;Your mix name&quot;</span><span class='p'>,</span>\n  <span class='s2'>&quot;topology&quot;</span><span class='o'>:</span> <span class='p'>[</span><span class='s2'>&quot;filename-basename.output-streamname | filename-basename.input-streamname&quot;</span><span class='p'>,</span> <span class='p'>...],</span>\n  <span class='s2'>&quot;partitionSize&quot;</span><span class='o'>:</span> <span class='nx'>integer</span>\n<span class='p'>}</span>\n</code></pre>\n</div>\n<p>The Node project uses Express and Socket.IO. It&#8217;s currently a monolithic file with no dependencies, so it expects you to have Express and Socket.IO installed globally. Refactoring it into a more modular Express application might be a nice exercise for someone looking to contribute to an open source project&#8230;</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/GqEOsK2oZfg\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/07/01/mixology"
                },
                {
                    "title":"You are a Robot...",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/6frf88Okz34/jsrobot"
                    },
                    "updated":"2014-06-30T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/30/jsrobot",
                    "content":{
                        "type":"html",
                        "content":"\n     <div class='image'>\n  <img src='http://dailyjs.com/images/posts/jsrobot.png' />\n  <small>That smiling face is you.</small>\n</div>\n<blockquote>\n<p>You are a robot, that smiling face represents you.</p>\n</blockquote>\n\n<p>My digital residual self image isn&#8217;t what it once was, but surely I&#8217;m more than a smiling face glyph! <a href='http://jsrobot.tk/'>JS Robot</a> by Pavel Evsegneev an open source game for learning JavaScript. The GitHub repository is here: <a href='https://github.com/Ahineya/jsrobot'>Ahineya / jsrobot</a>.</p>\n\n<p>The levels are unit tested with Mocha, and the author accepts pull requests for new levels. Levels are defined as text files, like this:</p>\n<div class='highlight'><pre><code class='text'>########\n#_  $f #\n########\n</code></pre>\n</div>\n<p>The <code>_</code> is the start position, <code>$</code> and <code>#</code> are walls, and <code>f</code> is the finish. The player must write JavaScript that pushes the robot to the <code>f</code> position. The full list of symbols is defined in <a href='https://github.com/Ahineya/jsrobot/blob/master/js/map.js'>map.js</a>:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>SYMBOL_TYPES</span> <span class='o'>=</span> <span class='p'>{</span>\n  <span class='s1'>&#39;#&#39;</span><span class='o'>:</span> <span class='s1'>&#39;wall&#39;</span><span class='p'>,</span>\n  <span class='s1'>&#39;$&#39;</span><span class='o'>:</span> <span class='s1'>&#39;wall&#39;</span><span class='p'>,</span>\n  <span class='s1'>&#39;space&#39;</span><span class='o'>:</span> <span class='s1'>&#39;space&#39;</span><span class='p'>,</span>\n  <span class='s1'>&#39;_&#39;</span><span class='o'>:</span> <span class='s1'>&#39;start&#39;</span><span class='p'>,</span>\n  <span class='s1'>&#39;f&#39;</span><span class='o'>:</span> <span class='s1'>&#39;finish&#39;</span>\n<span class='p'>};</span>\n</code></pre>\n</div>\n<p>It&#8217;s a fun game that may have a few surprises for beginners learning JavaScript, and the code is clean. You could easily extend it to have fancier graphics or a different narrative, but I like the text-based interface. It would be nice to optionally play it in a terminal by installing it with npm.</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/6frf88Okz34\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/30/jsrobot"
                },
                {
                    "title":"s/Ampersand.js/Backbone and Express/",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/Y-U3rPB6u2E/ampersand"
                    },
                    "updated":"2014-06-27T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/27/ampersand",
                    "content":{
                        "type":"html",
                        "content":"\n     <p><a href='http://ampersandjs.com/'>Ampersand.js</a> from <a href='http://andyet.com/'>&#38;yet</a> is a new web framework. It follows the trends that I&#8217;ve been using for my own applications:</p>\n\n<ul>\n<li>Everything is CommonJS</li>\n\n<li>Client-side dependencies use npm (for a list of modules, see <a href='http://tools.ampersandjs.com'>http://tools.ampersandjs.com</a>)</li>\n\n<li>State and data binding is Backbone-inspired</li>\n</ul>\n\n<p>It has a heavy focus on client-side development, so it leans on the MVVM approach. Most of these ideas come together in the <a href='http://ampersandjs.com/learn/forms'>form documentation</a>:</p>\n\n<blockquote>\n<p>The quickest way to build out a starting point for a form in your project is to point ampersand-cli at a model file to generate a form for editing it. We&#8217;ll eventually make more &#8220;official&#8221; input views types. But the idea is, if you want to write a color picker, or a date input view, or a username-checker-input that does server-side validation, or a password field with a strength indicator, you can write a view for that and as long as it follows the form view conventions in the list above and it will still work happily with the rest of the form.</p>\n</blockquote>\n\n<p>This is further explained explained in <a href='http://ampersandjs.com/learn/view-conventions#what-is-a-view-according-to-ampersand'>what is a view?</a></p>\n\n<blockquote>\n<p>It doesn&#8217;t matter if your &#8220;view&#8221; is an instance of ampersand-view or not. Any object can be a view if it follows a few rules.</p>\n</blockquote>\n\n<p>The example on that page looks like Backbone as well.</p>\n\n<p>When generating a new Ampersand application, it prompts for the server-side module. You can use either Express or hapi. It makes a demo app, which almost entirely client-side JavaScript. The payload that gets served is just this:</p>\n<div class='highlight'><pre><code class='html'><span class='cp'>&lt;!DOCTYPE html&gt;</span>\n<span class='nt'>&lt;link</span> <span class='na'>href=</span><span class='s'>&quot;/dailyjs.nonCached.css&quot;</span> <span class='na'>rel=</span><span class='s'>&quot;stylesheet&quot;</span> <span class='na'>type=</span><span class='s'>&quot;text/css&quot;</span><span class='nt'>&gt;</span>\n<span class='nt'>&lt;script </span><span class='na'>src=</span><span class='s'>&quot;/dailyjs.nonCached.js&quot;</span><span class='nt'>&gt;&lt;/script&gt;</span>\n</code></pre>\n</div>\n<p>It runs using a livereload module, so you can edit files and the client will be updated. As the documentation says, it treats the browser as a runtime.</p>\n\n<p>Ampersand seems like a way to unify Node and Backbone development. I don&#8217;t yet know how well Ampersand works in production on services like Heroku, or how easy it is to test, but I&#8217;m definitely enthusiastic about the idea of blending Node and libraries like Backbone or AngularJS.</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/Y-U3rPB6u2E\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/27/ampersand"
                },
                {
                    "title":"V8 Optimization Killers",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/pgAEouHnodM/optimization-killers"
                    },
                    "updated":"2014-06-26T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/26/optimization-killers",
                    "content":{
                        "type":"html",
                        "content":"\n     <p><a href='https://github.com/petkaantonov/bluebird'>Bluebird</a> gets a lot of respect for its performance and API style, and reading <a href='https://github.com/petkaantonov/bluebird/wiki/Optimization-killers'>Optimization killers</a> on the Bluebird wiki reinforced my own inclination to use it over the dozens of other competent promise libraries.</p>\n\n<p>Dug up by <a href='https://news.ycombinator.com/item?id=7943303'>diggan on Hacker News</a>, this wiki page explores some ways seemingly innocent JavaScript can cause V8 to avoid optimisation. It contains a code sample that allows you to detect if a function has been optimised, which I&#8217;ve been playing with:</p>\n<div class='highlight'><pre><code class='javascript'><span class='c1'>// Function that contains the pattern to be inspected (using with statement)</span>\n<span class='kd'>function</span> <span class='nx'>codeToTest</span><span class='p'>(</span><span class='nx'>a</span><span class='p'>,</span> <span class='nx'>b</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='k'>if</span> <span class='p'>(</span><span class='nx'>arguments</span><span class='p'>.</span><span class='nx'>length</span> <span class='o'>&lt;</span> <span class='mi'>2</span><span class='p'>)</span> <span class='nx'>b</span> <span class='o'>=</span> <span class='mi'>5</span><span class='p'>;</span>\n<span class='p'>}</span>\n\n<span class='kd'>function</span> <span class='nx'>printStatus</span><span class='p'>(</span><span class='nx'>fn</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='k'>switch</span><span class='p'>(</span><span class='o'>%</span><span class='nx'>GetOptimizationStatus</span><span class='p'>(</span><span class='nx'>fn</span><span class='p'>))</span> <span class='p'>{</span>\n    <span class='k'>case</span> <span class='mi'>1</span><span class='o'>:</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Function is optimized&#39;</span><span class='p'>);</span> <span class='k'>break</span><span class='p'>;</span>\n    <span class='k'>case</span> <span class='mi'>2</span><span class='o'>:</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Function is not optimized&#39;</span><span class='p'>);</span> <span class='k'>break</span><span class='p'>;</span>\n    <span class='k'>case</span> <span class='mi'>3</span><span class='o'>:</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Function is always optimized&#39;</span><span class='p'>);</span> <span class='k'>break</span><span class='p'>;</span>\n    <span class='k'>case</span> <span class='mi'>4</span><span class='o'>:</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Function is never optimized&#39;</span><span class='p'>);</span> <span class='k'>break</span><span class='p'>;</span>\n    <span class='k'>case</span> <span class='mi'>6</span><span class='o'>:</span> <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;Function is maybe deoptimized&#39;</span><span class='p'>);</span> <span class='k'>break</span><span class='p'>;</span>\n  <span class='p'>}</span>\n<span class='p'>}</span>\n\n<span class='c1'>// Fill type-info</span>\n<span class='nx'>codeToTest</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>);</span>\n\n<span class='o'>%</span><span class='nx'>OptimizeFunctionOnNextCall</span><span class='p'>(</span><span class='nx'>codeToTest</span><span class='p'>);</span>\n<span class='c1'>// The next call</span>\n<span class='nx'>codeToTest</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>,</span> <span class='mi'>2</span><span class='p'>);</span>\n\n<span class='c1'>// Check</span>\n<span class='nx'>printStatus</span><span class='p'>(</span><span class='nx'>codeToTest</span><span class='p'>);</span>\n</code></pre>\n</div>\n<p><code>%OptimizeFunctionOnNextCall</code> causes V8 to to check if a function can be optimised, and then marks it for optimisation. Running it and then calling <code>%GetOptimizationStatus</code> will get debugger information so you can see if a given function can be optimised.</p>\n\n<p>To run this example, the Bluebird wiki suggests using the following Node options:</p>\n<div class='highlight'><pre><code class='text'>node --trace_opt --trace_deopt --allow-natives-syntax test.js\n</code></pre>\n</div>\n<p>The <code>--trace_opt</code> option logs the names of optimised functions, and <code>--trace_deopt</code> logs &#8220;deoptimisations&#8221;. The <code>--allow-natives-syntax</code> option allows you to use the V8 functions that start with a percent, like <code>%OptimizeFunctionOnNextCall</code>.</p>\n\n<p>If this all sounds interesting but you&#8217;re focused on client-side development, then you might like to look at the <a href='http://google.github.io/tracing-framework/index.html'>Web Tracing Framework</a> from Google. It can use some of V8&#8217;s extra tracing options, and has both Chrome and Firefox extensions with rich instrumentation features. You&#8217;ll need to <a href='http://google.github.io/tracing-framework/advanced-features.html#chrome-flags'>enable some flags</a> to use it.</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/pgAEouHnodM\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/26/optimization-killers"
                },
                {
                    "title":"Node Roundup: husky, grunt-npmcopy",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/vPuYgnhDBR8/node-roundup"
                    },
                    "updated":"2014-06-25T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/25/node-roundup",
                    "content":{
                        "type":"html",
                        "content":"\n     <h3 id='husky'>husky</h3>\n\n<p>husky (GitHub: <a href='https://github.com/typicode/husky'>typicode / husky</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/husky'>husky</a>) by typicode is a module for helping to avoid bad commits being pushed using Git hooks.</p>\n\n<p>It basically sets up Git hooks for your Node projects:</p>\n\n<blockquote>\n<p>So what makes husky different?</p>\n\n<p>First, other modules often replace or delete existing hooks. husky won&#8217;t ever replace or modify an existing hook, so it&#8217;s a safer choice for a team or an open source project. In other terms, people who have set up their own hooks won&#8217;t be impacted by husky.</p>\n\n<p>I think also that husky is more easier and straightforward to use compared to others. husky&#8217;s README is just a few lines and setting up hooks should be simple.</p>\n\n<p>And last, usually other modules introduces unconventional package.json fields, husky uses only valid package.json fields.</p>\n</blockquote>\n\n<h3 id='gruntnpmcopy'>grunt-npmcopy</h3>\n\n<p>grunt-npmcopy (GitHub: <a href='https://github.com/timmywil/grunt-npmcopy'>timmywil / grunt-npmcopy</a>, License: <em>MIT</em>, npm: <a href='https://www.npmjs.org/package/grunt-npmcopy'>grunt-npmcopy</a>) by Timmy Willison allows you to use the same package manager for Node and client-side projects. It helps place client-side dependencies in the right directory by using a Grunt task called <code>npmcopy</code>.</p>\n\n<p>The <code>npmcopy</code> task takes source and destination options so you can avoid copying lots of extra files into your publicly accessible asset directories.</p>\n\n<blockquote>\n<p>Have you ever wondered why we have so many package managers? NPM, Bower, Component. Why don’t we just pick one? Well, after much deliberation with developers like you, I’ve decided to support the idea that NPM might just be able to handle it all.</p>\n</blockquote>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/vPuYgnhDBR8\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/25/node-roundup"
                },
                {
                    "title":"Small and Reusable Browser Modules: npm-dom",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/7QdkkQrGyVI/npm-dom"
                    },
                    "updated":"2014-06-24T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/24/npm-dom",
                    "content":{
                        "type":"html",
                        "content":"\n     <p>npm-dom (GitHub: <a href='https://github.com/npm-dom'>npm-dom</a>) by Azer Koçulu, Damon Oehlman, Max Ogden, Jake Verbaten, and Tim Oxley is a GitHub organisation that publishes DOM-related modules through npm.</p>\n\n<p>So far there are small modules like new-element (<a href='https://github.com/npm-dom/new-element'>https://github.com/npm-dom/new-element</a>) and siblings (<a href='https://github.com/npm-dom/siblings'>https://github.com/npm-dom/siblings</a>), but also larger modules like domquery (<a href='https://github.com/npm-dom/domquery'>https://github.com/npm-dom/domquery</a>).</p>\n\n<p>There are quite a few modules already. If you work with Browserify then you might like the way these modules can be consumed. As an example, take a look at <a href='https://github.com/npm-dom/class-list'>class-list</a>:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>elem</span> <span class='o'>=</span> <span class='nx'>someElement</span><span class='p'>;</span>\n<span class='kd'>var</span> <span class='nx'>ClassList</span> <span class='o'>=</span> <span class='nx'>require</span><span class='p'>(</span><span class='s1'>&#39;class-list&#39;</span><span class='p'>);</span>\n<span class='kd'>var</span> <span class='nx'>cl</span> <span class='o'>=</span> <span class='nx'>ClassList</span><span class='p'>(</span><span class='nx'>elem</span><span class='p'>);</span>\n\n<span class='nx'>cl</span><span class='p'>.</span><span class='nx'>add</span><span class='p'>(</span><span class='s1'>&#39;foo&#39;</span><span class='p'>);</span>\n<span class='nx'>cl</span><span class='p'>.</span><span class='nx'>remove</span><span class='p'>(</span><span class='s1'>&#39;bar&#39;</span><span class='p'>);</span>\n<span class='nx'>cl</span><span class='p'>.</span><span class='nx'>toggle</span><span class='p'>(</span><span class='s1'>&#39;baz&#39;</span><span class='p'>);</span>\n</code></pre>\n</div>\n<p>Azer was inspired to create another organisation called <a href='https://github.com/npm-flickr'>npm-flickr</a>, which is a set of Flickr-related libraries.</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/7QdkkQrGyVI\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/24/npm-dom"
                },
                {
                    "title":"Gifffer, Composing Discrete Events with RxJS",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/HBOFjdk1Pzc/gifffer-reactive"
                    },
                    "updated":"2014-06-23T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/23/gifffer-reactive",
                    "content":{
                        "type":"html",
                        "content":"\n     <h3 id='gifffer'>Gifffer</h3>\n\n<p>Gifffer (GitHub: <a href='https://github.com/krasimir/gifffer'>krasimir / gifffer</a>, License: <em>MIT</em>) by Krasimir Tsonev is a small library for adding a play control to animated gifs. It works by drawing a play button over the image, and dynamically inserting an image element when play is clicked. To prevent the gif from playing when the page loads, the <code>data-gifffer</code> attribute is used instead of the <code>src</code> attribute.</p>\n\n<p>Krasimir has a blog with gifs that illustrate browser features, so he wanted to be able to handle playing gifs more elegantly than the default behaviour. Here&#8217;s an example: <a href='http://work.krasimirtsonev.com/git/gifffer/example/'>Gifffer example</a>. You can click it to toggle playback.</p>\n\n<h3 id='composing_discrete_events_with_rxjs'>Composing Discrete Events with RxJS</h3>\n\n<p><a href='http://blog.bolshchikov.net/post/89367775878/composing-discrete-events-with-rxjs'>Composing Discrete Events with RxJS</a> by Sergey Bolshchikov is a post that compares <code>addEventListener</code> with RxJS. If you&#8217;ve ever used Reactive Extensions then you should be at home with the use of <code>selectMany</code>, <code>combineLatest</code>, and so on.</p>\n\n<p>Here&#8217;s the full example:</p>\n<div class='highlight'><pre><code class='javascript'><span class='kd'>var</span> <span class='nx'>mouseDowns</span> <span class='o'>=</span> <span class='nx'>Rx</span><span class='p'>.</span><span class='nx'>Observable</span><span class='p'>.</span><span class='nx'>fromEvent</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>,</span> <span class='s1'>&#39;mousedown&#39;</span><span class='p'>);</span>\n<span class='kd'>var</span> <span class='nx'>mouseMoves</span> <span class='o'>=</span> <span class='nx'>Rx</span><span class='p'>.</span><span class='nx'>Observable</span><span class='p'>.</span><span class='nx'>fromEvent</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>,</span> <span class='s1'>&#39;mousemove&#39;</span><span class='p'>);</span>\n<span class='kd'>var</span> <span class='nx'>mouseUps</span> <span class='o'>=</span> <span class='nx'>Rx</span><span class='p'>.</span><span class='nx'>Observable</span><span class='p'>.</span><span class='nx'>fromEvent</span><span class='p'>(</span><span class='nb'>document</span><span class='p'>,</span> <span class='s1'>&#39;mouseup&#39;</span><span class='p'>);</span>\n\n<span class='kd'>var</span> <span class='nx'>moves</span> <span class='o'>=</span> <span class='nx'>mouseDowns</span><span class='p'>.</span><span class='nx'>selectMany</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>md</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='kd'>var</span> <span class='nx'>start</span> <span class='o'>=</span> <span class='p'>{</span>\n    <span class='nx'>x</span><span class='o'>:</span> <span class='nx'>md</span><span class='p'>.</span><span class='nx'>clientX</span><span class='p'>,</span>\n    <span class='nx'>y</span><span class='o'>:</span> <span class='nx'>md</span><span class='p'>.</span><span class='nx'>clientY</span>\n  <span class='p'>};</span>\n  <span class='k'>return</span> <span class='nx'>mouseMoves</span><span class='p'>.</span><span class='nx'>combineLatest</span><span class='p'>(</span><span class='nx'>mouseUps</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>mm</span><span class='p'>,</span> <span class='nx'>mu</span><span class='p'>)</span> <span class='p'>{</span>\n    <span class='kd'>var</span> <span class='nx'>stop</span> <span class='o'>=</span> <span class='p'>{</span>\n      <span class='nx'>x</span><span class='o'>:</span> <span class='nx'>mu</span><span class='p'>.</span><span class='nx'>clientX</span><span class='p'>,</span>\n      <span class='nx'>y</span><span class='o'>:</span> <span class='nx'>mu</span><span class='p'>.</span><span class='nx'>clientY</span>\n    <span class='p'>};</span>\n    <span class='k'>return</span> <span class='p'>{</span>\n      <span class='nx'>start</span><span class='o'>:</span> <span class='nx'>start</span><span class='p'>,</span>\n      <span class='nx'>stop</span><span class='o'>:</span> <span class='nx'>stop</span>\n    <span class='p'>};</span>\n  <span class='p'>}).</span><span class='nx'>takeUntil</span><span class='p'>(</span><span class='nx'>mouseUps</span><span class='p'>);</span>\n<span class='p'>});</span>\n\n<span class='nx'>moves</span><span class='p'>.</span><span class='nx'>subscribe</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>res</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='kd'>var</span> <span class='nx'>body</span> <span class='o'>=</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>querySelector</span><span class='p'>(</span><span class='s1'>&#39;body&#39;</span><span class='p'>);</span>\n  <span class='nx'>body</span><span class='p'>.</span><span class='nx'>innerHTML</span> <span class='o'>=</span> <span class='s1'>&#39;Start: x = &#39;</span> <span class='o'>+</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>start</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>+</span> <span class='s1'>&#39;, y = &#39;</span> <span class='o'>+</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>start</span><span class='p'>.</span><span class='nx'>y</span> <span class='o'>+</span> <span class='s1'>&#39;; Stop: x = &#39;</span> <span class='o'>+</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>stop</span><span class='p'>.</span><span class='nx'>x</span> <span class='o'>+</span> <span class='s1'>&#39;, y = &#39;</span> <span class='o'>+</span> <span class='nx'>res</span><span class='p'>.</span><span class='nx'>stop</span><span class='p'>.</span><span class='nx'>y</span><span class='p'>;</span>\n<span class='p'>});</span>\n</code></pre>\n</div>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/HBOFjdk1Pzc\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/23/gifffer-reactive"
                },
                {
                    "title":"Google's Web Starter Kit",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/6G5-Nqa05hE/web-starter-kit"
                    },
                    "updated":"2014-06-20T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/20/web-starter-kit",
                    "content":{
                        "type":"html",
                        "content":"\n     <div class='image'>\n  <img src='http://dailyjs.com/images/posts/webstarterkit.png' />\n  <small>Web Starter Kit</small>\n</div>\n<p><a href='https://developers.google.com/web/starter-kit/'>Web Starter Kit</a> (GitHub: <a href='https://github.com/google/web-starter-kit'>google / web-starter-kit</a>, License: <em>Apache 2.0</em>) from Google is a boilerplate for developing responsive websites. It supports multiple devices, has a <a href='http://gulpjs.com/'>gulp.js</a> build script, and has support for synchronising pages across devices during testing.</p>\n\n<p>If you&#8217;re a Node developer, then you might like the gulp.js-based environment. Typing <code>gulp</code> will build and optimise the current project, and <code>gulp serve</code> will run a server. There&#8217;s also <code>gulp pagespeed</code> that uses Google&#8217;s <a href='https://developers.google.com/speed/pagespeed/insights/'>PageSpeed insights</a>.</p>\n\n<p>The sync feature for testing is powered by <a href='http://browsersync.io/'>BrowserSync</a>. BrowserSync is a Socket.IO-based Node application that automatically sends changes to pages as you edit files. It also has a <a href='https://github.com/shakyShane/gulp-browser-sync'>gulp.js module</a> that you can use with your own projects.</p>\n\n<p>If you&#8217;re wondering why a Node/Ruby project has come out of Google, then <a href='https://github.com/google/web-starter-kit/graphs/contributors'>take a look at the Web Starter Kit contributors</a>: it seems like it&#8217;s another project by Addy Osmani and Sindre Sorhus, just like <a href='http://yeoman.io/'>Yeoman</a>.</p>\n\n<p>Although this is a boilerplate project, the style guide makes it look more like something like Bootstrap. If you find Bootstrap too heavy for your projects and would prefer something lighter with workflow tools, then give Web Starter Kit a try.</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/6G5-Nqa05hE\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/20/web-starter-kit"
                },
                {
                    "title":"Bridge Node and PhantomJS with phridge",
                    "link":{
                        "href":"http://feedproxy.google.com/~r/dailyjs/~3/EgGvNithsIw/phridge"
                    },
                    "updated":"2014-06-19T00:00:00+01:00",
                    "id":"http://dailyjs.com/2014/06/19/phridge",
                    "content":{
                        "type":"html",
                        "content":"\n     <p>I use PhantomJS for integration testing and PDF generation, but I find working with its API awkward. That means I often put as much logic as possible into a Node wrapper before handing off the bare minimum to PhantomJS.</p>\n\n<p>Johannes Ewald sent in a module that attempts to improve on this workflow: phridge (GitHub: <a href='https://github.com/peerigon/phridge'>peerigon / phridge</a>, License: <em>Unlicense</em>, npm: <a href='https://www.npmjs.org/package/phridge'>phridge</a>).</p>\n\n<p>For comparison, here is an example of a <strong>standard</strong> PhantomJS script:</p>\n<div class='highlight'><pre><code class='javascript'><span class='nx'>phantom</span><span class='p'>.</span><span class='nx'>addCookie</span><span class='p'>(</span><span class='s1'>&#39;cookie_name&#39;</span><span class='p'>,</span> <span class='s1'>&#39;cookie_value&#39;</span><span class='p'>,</span> <span class='s1'>&#39;localhost&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>\n  <span class='nx'>phantom</span><span class='p'>.</span><span class='nx'>createPage</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>page</span><span class='p'>)</span> <span class='p'>{</span>\n    <span class='nx'>page</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span><span class='s1'>&#39;customHeaders.Referer&#39;</span><span class='p'>,</span> <span class='s1'>&#39;http://google.com&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>\n      <span class='nx'>page</span><span class='p'>.</span><span class='nx'>set</span><span class='p'>(</span>\n        <span class='s1'>&#39;settings.userAgent&#39;</span><span class='p'>,</span>\n        <span class='s1'>&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)&#39;</span><span class='p'>,</span>\n        <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>\n          <span class='nx'>page</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>(</span><span class='s1'>&#39;http://localhost:9901/cookie&#39;</span><span class='p'>,</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>status</span><span class='p'>)</span> <span class='p'>{</span>\n            <span class='nx'>page</span><span class='p'>.</span><span class='nx'>evaluate</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>)</span> <span class='p'>{</span>\n              <span class='k'>return</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>querySelector</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>).</span><span class='nx'>innerText</span><span class='p'>;</span>\n            <span class='p'>},</span> <span class='kd'>function</span> <span class='p'>(</span><span class='nx'>text</span><span class='p'>)</span> <span class='p'>{</span>\n              <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;The element contains the following text: &#39;</span><span class='p'>,</span> <span class='nx'>text</span><span class='p'>)</span>\n            <span class='p'>},</span> <span class='s1'>&#39;h1&#39;</span><span class='p'>);</span>\n          <span class='p'>});</span>\n        <span class='p'>}</span>\n      <span class='p'>);</span>\n    <span class='p'>});</span>\n  <span class='p'>});</span>\n<span class='p'>});</span>\n</code></pre>\n</div>\n<p>With phridge, however, you can do this:</p>\n<div class='highlight'><pre><code class='javascript'><span class='nx'>phantom</span><span class='p'>.</span><span class='nx'>run</span><span class='p'>(</span><span class='s1'>&#39;h1&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>,</span> <span class='nx'>resolve</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='kd'>var</span> <span class='nx'>page</span><span class='p'>;</span>\n\n  <span class='c1'>// This code runs inside PhantomJS</span>\n  <span class='nx'>phantom</span><span class='p'>.</span><span class='nx'>addCookie</span><span class='p'>(</span><span class='s1'>&#39;cookie_name&#39;</span><span class='p'>,</span> <span class='s1'>&#39;cookie_value&#39;</span><span class='p'>,</span> <span class='s1'>&#39;localhost&#39;</span><span class='p'>);</span>\n\n  <span class='nx'>page</span> <span class='o'>=</span> <span class='nx'>webpage</span><span class='p'>.</span><span class='nx'>create</span><span class='p'>();</span>\n  <span class='nx'>page</span><span class='p'>.</span><span class='nx'>customHeaders</span> <span class='o'>=</span> <span class='p'>{</span>\n    <span class='nx'>Referer</span><span class='o'>:</span> <span class='s1'>&#39;http://google.com&#39;</span>\n  <span class='p'>};</span>\n  <span class='nx'>page</span><span class='p'>.</span><span class='nx'>settings</span> <span class='o'>=</span> <span class='p'>{</span>\n    <span class='nx'>userAgent</span><span class='o'>:</span> <span class='s1'>&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)&#39;</span>\n  <span class='p'>};</span>\n  <span class='nx'>page</span><span class='p'>.</span><span class='nx'>open</span><span class='p'>(</span><span class='s1'>&#39;http://www.google.com&#39;</span><span class='p'>,</span> <span class='kd'>function</span><span class='p'>()</span> <span class='p'>{</span>\n    <span class='kd'>var</span> <span class='nx'>text</span> <span class='o'>=</span> <span class='nx'>page</span><span class='p'>.</span><span class='nx'>evaluate</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>)</span> <span class='p'>{</span>\n      <span class='k'>return</span> <span class='nb'>document</span><span class='p'>.</span><span class='nx'>querySelector</span><span class='p'>(</span><span class='nx'>selector</span><span class='p'>).</span><span class='nx'>innerText</span><span class='p'>;</span>\n    <span class='p'>},</span> <span class='nx'>selector</span><span class='p'>);</span>\n\n    <span class='c1'>// Resolve the promise and pass &#39;text&#39; back to node </span>\n    <span class='nx'>resolve</span><span class='p'>(</span><span class='nx'>text</span><span class='p'>);</span>\n  <span class='p'>});</span>\n<span class='p'>}).</span><span class='nx'>then</span><span class='p'>(</span><span class='kd'>function</span><span class='p'>(</span><span class='nx'>text</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='c1'>// Inside node again</span>\n  <span class='nx'>console</span><span class='p'>.</span><span class='nx'>log</span><span class='p'>(</span><span class='s1'>&#39;The element contains the following text: &#39;</span><span class='o'>+</span> <span class='nx'>text</span><span class='p'>);</span>\n<span class='p'>});</span>\n</code></pre>\n</div>\n<p>The <code>phantom</code> object has its <a href='https://github.com/peerigon/phridge#api-phantom'>own API</a> that is specific to phridge. Phridge works by starting a small HTTP server from within PhantomJS to act as an API entry point from Node. It uses a shared secret to reduce the potential for abuse &#8211; this is documented in the readme, under <a href='https://github.com/peerigon/phridge#api-phantom'>a note on security</a>.</p>\n\n<p>The approach used by phridge is similar to my own homebrew solutions that have evolved over the last year or two, so I&#8217;m hoping I can replace my ad-hoc code with phridge to make my PhantomJS dependent projects more maintainable.</p>\n   <img src=\"http://feeds.feedburner.com/~r/dailyjs/~4/EgGvNithsIw\" height=\"1\" width=\"1\"/>"
                    },
                    "origLink":"http://dailyjs.com/2014/06/19/phridge"
                }
            ]
        }
    }
}}