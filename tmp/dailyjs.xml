<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>DailyJS</title>
    <link href="http://dailyjs.com/feed.xml" rel="self"/>
    <link href="http://dailyjs.com" />
    <updated>2014-06-30T12:03:10+01:00</updated>
    <id>http://dailyjs.com/</id>
    <author>
        <name>DailyJS</name>
    </author>

    <entry>
        <title>You are a Robot...</title>
        <link href="http://dailyjs.com/2014/06/30/jsrobot"/>
        <updated>2014-06-30T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/30/jsrobot</id>
        <content type="html">
            &lt;div class='image'&gt;
            &lt;img src='http://dailyjs.com/images/posts/jsrobot.png' /&gt;
            &lt;small&gt;That smiling face is you.&lt;/small&gt;
            &lt;/div&gt;
            &lt;blockquote&gt;
            &lt;p&gt;You are a robot, that smiling face represents you.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;My digital residual self image isn&amp;#8217;t what it once was, but surely I&amp;#8217;m more than a smiling face glyph! &lt;a href='http://jsrobot.tk/'&gt;JS Robot&lt;/a&gt; by Pavel Evsegneev an open source game for learning JavaScript. The GitHub repository is here: &lt;a href='https://github.com/Ahineya/jsrobot'&gt;Ahineya / jsrobot&lt;/a&gt;.&lt;/p&gt;

            &lt;p&gt;The levels are unit tested with Mocha, and the author accepts pull requests for new levels. Levels are defined as text files, like this:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;########
            #_  $f #
            ########
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;The &lt;code&gt;_&lt;/code&gt; is the start position, &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; are walls, and &lt;code&gt;f&lt;/code&gt; is the finish. The player must write JavaScript that pushes the robot to the &lt;code&gt;f&lt;/code&gt; position. The full list of symbols is defined in &lt;a href='https://github.com/Ahineya/jsrobot/blob/master/js/map.js'&gt;map.js&lt;/a&gt;:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;SYMBOL_TYPES&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='s1'&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;wall&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='s1'&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;wall&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='s1'&gt;&amp;#39;space&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;space&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='s1'&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='s1'&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;finish&amp;#39;&lt;/span&gt;
            &lt;span class='p'&gt;};&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;It&amp;#8217;s a fun game that may have a few surprises for beginners learning JavaScript, and the code is clean. You could easily extend it to have fancier graphics or a different narrative, but I like the text-based interface. It would be nice to optionally play it in a terminal by installing it with npm.&lt;/p&gt;
        </content>
    </entry>

    <entry>
        <title>s/Ampersand.js/Backbone and Express/</title>
        <link href="http://dailyjs.com/2014/06/27/ampersand"/>
        <updated>2014-06-27T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/27/ampersand</id>
        <content type="html">
            &lt;p&gt;&lt;a href='http://ampersandjs.com/'&gt;Ampersand.js&lt;/a&gt; from &lt;a href='http://andyet.com/'&gt;&amp;#38;yet&lt;/a&gt; is a new web framework. It follows the trends that I&amp;#8217;ve been using for my own applications:&lt;/p&gt;

            &lt;ul&gt;
            &lt;li&gt;Everything is CommonJS&lt;/li&gt;

            &lt;li&gt;Client-side dependencies use npm (for a list of modules, see &lt;a href='http://tools.ampersandjs.com'&gt;http://tools.ampersandjs.com&lt;/a&gt;)&lt;/li&gt;

            &lt;li&gt;State and data binding is Backbone-inspired&lt;/li&gt;
            &lt;/ul&gt;

            &lt;p&gt;It has a heavy focus on client-side development, so it leans on the MVVM approach. Most of these ideas come together in the &lt;a href='http://ampersandjs.com/learn/forms'&gt;form documentation&lt;/a&gt;:&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;The quickest way to build out a starting point for a form in your project is to point ampersand-cli at a model file to generate a form for editing it. We&amp;#8217;ll eventually make more &amp;#8220;official&amp;#8221; input views types. But the idea is, if you want to write a color picker, or a date input view, or a username-checker-input that does server-side validation, or a password field with a strength indicator, you can write a view for that and as long as it follows the form view conventions in the list above and it will still work happily with the rest of the form.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;This is further explained explained in &lt;a href='http://ampersandjs.com/learn/view-conventions#what-is-a-view-according-to-ampersand'&gt;what is a view?&lt;/a&gt;&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;It doesn&amp;#8217;t matter if your &amp;#8220;view&amp;#8221; is an instance of ampersand-view or not. Any object can be a view if it follows a few rules.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;The example on that page looks like Backbone as well.&lt;/p&gt;

            &lt;p&gt;When generating a new Ampersand application, it prompts for the server-side module. You can use either Express or hapi. It makes a demo app, which almost entirely client-side JavaScript. The payload that gets served is just this:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='cp'&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;link&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/dailyjs.nonCached.css&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;rel=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/dailyjs.nonCached.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;It runs using a livereload module, so you can edit files and the client will be updated. As the documentation says, it treats the browser as a runtime.&lt;/p&gt;

            &lt;p&gt;Ampersand seems like a way to unify Node and Backbone development. I don&amp;#8217;t yet know how well Ampersand works in production on services like Heroku, or how easy it is to test, but I&amp;#8217;m definitely enthusiastic about the idea of blending Node and libraries like Backbone or AngularJS.&lt;/p&gt;
        </content>
    </entry>

    <entry>
        <title>V8 Optimization Killers</title>
        <link href="http://dailyjs.com/2014/06/26/optimization-killers"/>
        <updated>2014-06-26T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/26/optimization-killers</id>
        <content type="html">
            &lt;p&gt;&lt;a href='https://github.com/petkaantonov/bluebird'&gt;Bluebird&lt;/a&gt; gets a lot of respect for its performance and API style, and reading &lt;a href='https://github.com/petkaantonov/bluebird/wiki/Optimization-killers'&gt;Optimization killers&lt;/a&gt; on the Bluebird wiki reinforced my own inclination to use it over the dozens of other competent promise libraries.&lt;/p&gt;

            &lt;p&gt;Dug up by &lt;a href='https://news.ycombinator.com/item?id=7943303'&gt;diggan on Hacker News&lt;/a&gt;, this wiki page explores some ways seemingly innocent JavaScript can cause V8 to avoid optimisation. It contains a code sample that allows you to detect if a function has been optimised, which I&amp;#8217;ve been playing with:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// Function that contains the pattern to be inspected (using with statement)&lt;/span&gt;
            &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;codeToTest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;arguments&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;length&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='p'&gt;}&lt;/span&gt;

            &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;printStatus&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;fn&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;switch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='nx'&gt;GetOptimizationStatus&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;fn&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Function is optimized&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Function is not optimized&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Function is always optimized&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Function is never optimized&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Function is maybe deoptimized&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='p'&gt;}&lt;/span&gt;
            &lt;span class='p'&gt;}&lt;/span&gt;

            &lt;span class='c1'&gt;// Fill type-info&lt;/span&gt;
            &lt;span class='nx'&gt;codeToTest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

            &lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='nx'&gt;OptimizeFunctionOnNextCall&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;codeToTest&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='c1'&gt;// The next call&lt;/span&gt;
            &lt;span class='nx'&gt;codeToTest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

            &lt;span class='c1'&gt;// Check&lt;/span&gt;
            &lt;span class='nx'&gt;printStatus&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;codeToTest&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;&lt;code&gt;%OptimizeFunctionOnNextCall&lt;/code&gt; causes V8 to to check if a function can be optimised, and then marks it for optimisation. Running it and then calling &lt;code&gt;%GetOptimizationStatus&lt;/code&gt; will get debugger information so you can see if a given function can be optimised.&lt;/p&gt;

            &lt;p&gt;To run this example, the Bluebird wiki suggests using the following Node options:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;node --trace_opt --trace_deopt --allow-natives-syntax test.js
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;The &lt;code&gt;--trace_opt&lt;/code&gt; option logs the names of optimised functions, and &lt;code&gt;--trace_deopt&lt;/code&gt; logs &amp;#8220;deoptimisations&amp;#8221;. The &lt;code&gt;--allow-natives-syntax&lt;/code&gt; option allows you to use the V8 functions that start with a percent, like &lt;code&gt;%OptimizeFunctionOnNextCall&lt;/code&gt;.&lt;/p&gt;

            &lt;p&gt;If this all sounds interesting but you&amp;#8217;re focused on client-side development, then you might like to look at the &lt;a href='http://google.github.io/tracing-framework/index.html'&gt;Web Tracing Framework&lt;/a&gt; from Google. It can use some of V8&amp;#8217;s extra tracing options, and has both Chrome and Firefox extensions with rich instrumentation features. You&amp;#8217;ll need to &lt;a href='http://google.github.io/tracing-framework/advanced-features.html#chrome-flags'&gt;enable some flags&lt;/a&gt; to use it.&lt;/p&gt;
        </content>
    </entry>

    <entry>
        <title>Node Roundup: husky, grunt-npmcopy</title>
        <link href="http://dailyjs.com/2014/06/25/node-roundup"/>
        <updated>2014-06-25T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/25/node-roundup</id>
        <content type="html">
            &lt;h3 id='husky'&gt;husky&lt;/h3&gt;

            &lt;p&gt;husky (GitHub: &lt;a href='https://github.com/typicode/husky'&gt;typicode / husky&lt;/a&gt;, License: &lt;em&gt;MIT&lt;/em&gt;, npm: &lt;a href='https://www.npmjs.org/package/husky'&gt;husky&lt;/a&gt;) by typicode is a module for helping to avoid bad commits being pushed using Git hooks.&lt;/p&gt;

            &lt;p&gt;It basically sets up Git hooks for your Node projects:&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;So what makes husky different?&lt;/p&gt;

            &lt;p&gt;First, other modules often replace or delete existing hooks. husky won&amp;#8217;t ever replace or modify an existing hook, so it&amp;#8217;s a safer choice for a team or an open source project. In other terms, people who have set up their own hooks won&amp;#8217;t be impacted by husky.&lt;/p&gt;

            &lt;p&gt;I think also that husky is more easier and straightforward to use compared to others. husky&amp;#8217;s README is just a few lines and setting up hooks should be simple.&lt;/p&gt;

            &lt;p&gt;And last, usually other modules introduces unconventional package.json fields, husky uses only valid package.json fields.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;h3 id='gruntnpmcopy'&gt;grunt-npmcopy&lt;/h3&gt;

            &lt;p&gt;grunt-npmcopy (GitHub: &lt;a href='https://github.com/timmywil/grunt-npmcopy'&gt;timmywil / grunt-npmcopy&lt;/a&gt;, License: &lt;em&gt;MIT&lt;/em&gt;, npm: &lt;a href='https://www.npmjs.org/package/grunt-npmcopy'&gt;grunt-npmcopy&lt;/a&gt;) by Timmy Willison allows you to use the same package manager for Node and client-side projects. It helps place client-side dependencies in the right directory by using a Grunt task called &lt;code&gt;npmcopy&lt;/code&gt;.&lt;/p&gt;

            &lt;p&gt;The &lt;code&gt;npmcopy&lt;/code&gt; task takes source and destination options so you can avoid copying lots of extra files into your publicly accessible asset directories.&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Have you ever wondered why we have so many package managers? NPM, Bower, Component. Why don’t we just pick one? Well, after much deliberation with developers like you, I’ve decided to support the idea that NPM might just be able to handle it all.&lt;/p&gt;
            &lt;/blockquote&gt;
        </content>
    </entry>

    <entry>
        <title>Small and Reusable Browser Modules: npm-dom</title>
        <link href="http://dailyjs.com/2014/06/24/npm-dom"/>
        <updated>2014-06-24T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/24/npm-dom</id>
        <content type="html">
            &lt;p&gt;npm-dom (GitHub: &lt;a href='https://github.com/npm-dom'&gt;npm-dom&lt;/a&gt;) by Azer Koçulu, Damon Oehlman, Max Ogden, Jake Verbaten, and Tim Oxley is a GitHub organisation that publishes DOM-related modules through npm.&lt;/p&gt;

            &lt;p&gt;So far there are small modules like new-element (&lt;a href='https://github.com/npm-dom/new-element'&gt;https://github.com/npm-dom/new-element&lt;/a&gt;) and siblings (&lt;a href='https://github.com/npm-dom/siblings'&gt;https://github.com/npm-dom/siblings&lt;/a&gt;), but also larger modules like domquery (&lt;a href='https://github.com/npm-dom/domquery'&gt;https://github.com/npm-dom/domquery&lt;/a&gt;).&lt;/p&gt;

            &lt;p&gt;There are quite a few modules already. If you work with Browserify then you might like the way these modules can be consumed. As an example, take a look at &lt;a href='https://github.com/npm-dom/class-list'&gt;class-list&lt;/a&gt;:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;elem&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;someElement&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;ClassList&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;class-list&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;cl&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;ClassList&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

            &lt;span class='nx'&gt;cl&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='nx'&gt;cl&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;remove&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='nx'&gt;cl&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;toggle&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;Azer was inspired to create another organisation called &lt;a href='https://github.com/npm-flickr'&gt;npm-flickr&lt;/a&gt;, which is a set of Flickr-related libraries.&lt;/p&gt;
        </content>
    </entry>

    <entry>
        <title>Gifffer, Composing Discrete Events with RxJS</title>
        <link href="http://dailyjs.com/2014/06/23/gifffer-reactive"/>
        <updated>2014-06-23T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/23/gifffer-reactive</id>
        <content type="html">
            &lt;h3 id='gifffer'&gt;Gifffer&lt;/h3&gt;

            &lt;p&gt;Gifffer (GitHub: &lt;a href='https://github.com/krasimir/gifffer'&gt;krasimir / gifffer&lt;/a&gt;, License: &lt;em&gt;MIT&lt;/em&gt;) by Krasimir Tsonev is a small library for adding a play control to animated gifs. It works by drawing a play button over the image, and dynamically inserting an image element when play is clicked. To prevent the gif from playing when the page loads, the &lt;code&gt;data-gifffer&lt;/code&gt; attribute is used instead of the &lt;code&gt;src&lt;/code&gt; attribute.&lt;/p&gt;

            &lt;p&gt;Krasimir has a blog with gifs that illustrate browser features, so he wanted to be able to handle playing gifs more elegantly than the default behaviour. Here&amp;#8217;s an example: &lt;a href='http://work.krasimirtsonev.com/git/gifffer/example/'&gt;Gifffer example&lt;/a&gt;. You can click it to toggle playback.&lt;/p&gt;

            &lt;h3 id='composing_discrete_events_with_rxjs'&gt;Composing Discrete Events with RxJS&lt;/h3&gt;

            &lt;p&gt;&lt;a href='http://blog.bolshchikov.net/post/89367775878/composing-discrete-events-with-rxjs'&gt;Composing Discrete Events with RxJS&lt;/a&gt; by Sergey Bolshchikov is a post that compares &lt;code&gt;addEventListener&lt;/code&gt; with RxJS. If you&amp;#8217;ve ever used Reactive Extensions then you should be at home with the use of &lt;code&gt;selectMany&lt;/code&gt;, &lt;code&gt;combineLatest&lt;/code&gt;, and so on.&lt;/p&gt;

            &lt;p&gt;Here&amp;#8217;s the full example:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;mouseDowns&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Rx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Observable&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fromEvent&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;mouseMoves&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Rx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Observable&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fromEvent&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;mouseUps&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Rx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Observable&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fromEvent&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;moves&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;mouseDowns&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;selectMany&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;md&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;start&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;md&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;clientX&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;md&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;clientY&lt;/span&gt;
            &lt;span class='p'&gt;};&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;mouseMoves&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;combineLatest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;mouseUps&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;mm&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;mu&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;stop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;mu&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;clientX&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;mu&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;clientY&lt;/span&gt;
            &lt;span class='p'&gt;};&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='nx'&gt;stop&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;stop&lt;/span&gt;
            &lt;span class='p'&gt;};&lt;/span&gt;
            &lt;span class='p'&gt;}).&lt;/span&gt;&lt;span class='nx'&gt;takeUntil&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;mouseUps&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;

            &lt;span class='nx'&gt;moves&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;subscribe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;body&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;querySelector&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='nx'&gt;body&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;innerHTML&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Start: x = &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;, y = &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;y&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;; Stop: x = &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;, y = &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
        </content>
    </entry>

    <entry>
        <title>Google's Web Starter Kit</title>
        <link href="http://dailyjs.com/2014/06/20/web-starter-kit"/>
        <updated>2014-06-20T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/20/web-starter-kit</id>
        <content type="html">
            &lt;div class='image'&gt;
            &lt;img src='http://dailyjs.com/images/posts/webstarterkit.png' /&gt;
            &lt;small&gt;Web Starter Kit&lt;/small&gt;
            &lt;/div&gt;
            &lt;p&gt;&lt;a href='https://developers.google.com/web/starter-kit/'&gt;Web Starter Kit&lt;/a&gt; (GitHub: &lt;a href='https://github.com/google/web-starter-kit'&gt;google / web-starter-kit&lt;/a&gt;, License: &lt;em&gt;Apache 2.0&lt;/em&gt;) from Google is a boilerplate for developing responsive websites. It supports multiple devices, has a &lt;a href='http://gulpjs.com/'&gt;gulp.js&lt;/a&gt; build script, and has support for synchronising pages across devices during testing.&lt;/p&gt;

            &lt;p&gt;If you&amp;#8217;re a Node developer, then you might like the gulp.js-based environment. Typing &lt;code&gt;gulp&lt;/code&gt; will build and optimise the current project, and &lt;code&gt;gulp serve&lt;/code&gt; will run a server. There&amp;#8217;s also &lt;code&gt;gulp pagespeed&lt;/code&gt; that uses Google&amp;#8217;s &lt;a href='https://developers.google.com/speed/pagespeed/insights/'&gt;PageSpeed insights&lt;/a&gt;.&lt;/p&gt;

            &lt;p&gt;The sync feature for testing is powered by &lt;a href='http://browsersync.io/'&gt;BrowserSync&lt;/a&gt;. BrowserSync is a Socket.IO-based Node application that automatically sends changes to pages as you edit files. It also has a &lt;a href='https://github.com/shakyShane/gulp-browser-sync'&gt;gulp.js module&lt;/a&gt; that you can use with your own projects.&lt;/p&gt;

            &lt;p&gt;If you&amp;#8217;re wondering why a Node/Ruby project has come out of Google, then &lt;a href='https://github.com/google/web-starter-kit/graphs/contributors'&gt;take a look at the Web Starter Kit contributors&lt;/a&gt;: it seems like it&amp;#8217;s another project by Addy Osmani and Sindre Sorhus, just like &lt;a href='http://yeoman.io/'&gt;Yeoman&lt;/a&gt;.&lt;/p&gt;

            &lt;p&gt;Although this is a boilerplate project, the style guide makes it look more like something like Bootstrap. If you find Bootstrap too heavy for your projects and would prefer something lighter with workflow tools, then give Web Starter Kit a try.&lt;/p&gt;
        </content>
    </entry>

    <entry>
        <title>Bridge Node and PhantomJS with phridge</title>
        <link href="http://dailyjs.com/2014/06/19/phridge"/>
        <updated>2014-06-19T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/19/phridge</id>
        <content type="html">
            &lt;p&gt;I use PhantomJS for integration testing and PDF generation, but I find working with its API awkward. That means I often put as much logic as possible into a Node wrapper before handing off the bare minimum to PhantomJS.&lt;/p&gt;

            &lt;p&gt;Johannes Ewald sent in a module that attempts to improve on this workflow: phridge (GitHub: &lt;a href='https://github.com/peerigon/phridge'&gt;peerigon / phridge&lt;/a&gt;, License: &lt;em&gt;Unlicense&lt;/em&gt;, npm: &lt;a href='https://www.npmjs.org/package/phridge'&gt;phridge&lt;/a&gt;).&lt;/p&gt;

            &lt;p&gt;For comparison, here is an example of a &lt;strong&gt;standard&lt;/strong&gt; PhantomJS script:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;phantom&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;addCookie&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;cookie_name&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;cookie_value&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;phantom&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;createPage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;customHeaders.Referer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;http://google.com&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
            &lt;span class='s1'&gt;&amp;#39;settings.userAgent&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='s1'&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;http://localhost:9901/cookie&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;status&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;evaluate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;selector&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;querySelector&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;selector&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;innerText&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;The element contains the following text: &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;
            &lt;span class='p'&gt;}&lt;/span&gt;
            &lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;With phridge, however, you can do this:&lt;/p&gt;
            &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;phantom&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;run&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;selector&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;resolve&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

            &lt;span class='c1'&gt;// This code runs inside PhantomJS&lt;/span&gt;
            &lt;span class='nx'&gt;phantom&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;addCookie&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;cookie_name&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;cookie_value&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

            &lt;span class='nx'&gt;page&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;webpage&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
            &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;customHeaders&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;Referer&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;http://google.com&amp;#39;&lt;/span&gt;
            &lt;span class='p'&gt;};&lt;/span&gt;
            &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;settings&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;userAgent&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)&amp;#39;&lt;/span&gt;
            &lt;span class='p'&gt;};&lt;/span&gt;
            &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;http://www.google.com&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;text&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;page&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;evaluate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;selector&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;querySelector&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;selector&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;innerText&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='nx'&gt;selector&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

            &lt;span class='c1'&gt;// Resolve the promise and pass &amp;#39;text&amp;#39; back to node &lt;/span&gt;
            &lt;span class='nx'&gt;resolve&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;
            &lt;span class='p'&gt;}).&lt;/span&gt;&lt;span class='nx'&gt;then&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='c1'&gt;// Inside node again&lt;/span&gt;
            &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;The element contains the following text: &amp;#39;&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='p'&gt;});&lt;/span&gt;
            &lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;The &lt;code&gt;phantom&lt;/code&gt; object has its &lt;a href='https://github.com/peerigon/phridge#api-phantom'&gt;own API&lt;/a&gt; that is specific to phridge. Phridge works by starting a small HTTP server from within PhantomJS to act as an API entry point from Node. It uses a shared secret to reduce the potential for abuse &amp;#8211; this is documented in the readme, under &lt;a href='https://github.com/peerigon/phridge#api-phantom'&gt;a note on security&lt;/a&gt;.&lt;/p&gt;

            &lt;p&gt;The approach used by phridge is similar to my own homebrew solutions that have evolved over the last year or two, so I&amp;#8217;m hoping I can replace my ad-hoc code with phridge to make my PhantomJS dependent projects more maintainable.&lt;/p&gt;
        </content>
    </entry>

    <entry>
        <title>Node Roundup: Node 0.8.27 and 0.10.29, BipIO, Reducto</title>
        <link href="http://dailyjs.com/2014/06/18/node-roundup"/>
        <updated>2014-06-18T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/18/node-roundup</id>
        <content type="html">
            &lt;h3 id='node_0827_and_01029'&gt;Node 0.8.27 and 0.10.29&lt;/h3&gt;

            &lt;p&gt;You may be surprised to see a Node 0.8 release here, but &lt;a href='http://blog.nodejs.org/2014/06/16/openssl-and-breaking-utf-8-change/'&gt;0.8.27 and 0.10.29 have been updated&lt;/a&gt; to fix an OpenSSL and UTF-8 encoding issue:&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;Additionally these releases address the fact that V8 UTF-8 encoding would allow unmatched surrogate pairs. That is to say, previously you could construct a valid JavaScript string (which are stored internally as UCS-2), pass it to a Buffer as UTF-8, send and consume that string in another process and it would fail to interpret because the UTF-8 string was invalid.&lt;/p&gt;

            &lt;p&gt;This breaks backward compatibility for the specific reason that unsanitized strings sent as a text payload for an RFC compliant WebSocket implementation should result in the disconnection of the client. If the client attempts to reconnect and receives another invalid payload it must disconnect again. If there is no logic to handle the reconnection attempts, this may lead to a denial of service attack.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;The post includes an example with &lt;code&gt;Buffer&lt;/code&gt;, and demonstrates how even if you&amp;#8217;re not explicitly creating &lt;code&gt;Buffer&lt;/code&gt; instances from strings Node might still do it behind the scenes.&lt;/p&gt;

            &lt;h3 id='bipio'&gt;BipIO&lt;/h3&gt;

            &lt;p&gt;&lt;a href='https://bip.io/'&gt;BipIO&lt;/a&gt; (GitHub: &lt;a href='https://github.com/bipio-server/bipio'&gt;bipio-server / bipio&lt;/a&gt;, License: &lt;em&gt;GPLv3&lt;/em&gt;) an API platform for consuming and composing APIs based on graph definitions and pipelines. You can run your own server, and there&amp;#8217;s a closed source web UI that you can &lt;a href='https://bip.io/signup'&gt;sign up to&lt;/a&gt;:&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;If you&amp;#8217;re familiar with Yahoo Pipes, IFTTT, Zapier, Mulesoft, Cloudwork or Temboo - the concept is a little similar. The server has a small footprint which lets you create and automate an internet of things that matter to you. It can be installed alongside your existing open source app or prototype for out-of-band message transformation, feed aggregation, queuing, social network fanout or whatever you like, even on your Rasberry Pi.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;It uses MongoDB and RabbitMQ, and the readme has help for setting it up on a server with Monit.&lt;/p&gt;

            &lt;h3 id='reducto'&gt;Reducto&lt;/h3&gt;

            &lt;p&gt;Reducto (GitHub: &lt;a href='https://github.com/michaelleeallen/reducto'&gt;michaelleeallen / reducto&lt;/a&gt;, License: &lt;em&gt;MIT&lt;/em&gt;, npm: &lt;a href='https://www.npmjs.org/package/reducto'&gt;reducto&lt;/a&gt;) by Michael Allen is configuration framework for Express that aims to simplify the creation of routes for APIs.&lt;/p&gt;

            &lt;blockquote&gt;
            &lt;p&gt;The main goal of reducto is to break apart the routing mechanism into smaller, more cohesive components. By reducing your app to just middleware, data transforms, and reusable service calls you end up with a smaller set of code to reason about and thus make your app easier to write and maintain.&lt;/p&gt;
            &lt;/blockquote&gt;

            &lt;p&gt;You can create routes using JSON files that map middleware, service handlers, data fixtures, and transform functions to routes. It also supports services, which are callable HTTP endpoints. It comes with an example application that shows weather for a given zip code.&lt;/p&gt;
        </content>
    </entry>

    <entry>
        <title>Hya: JavaScript Synths and Plugins</title>
        <link href="http://dailyjs.com/2014/06/17/hya"/>
        <updated>2014-06-17T00:00:00+01:00</updated>
        <id>http://dailyjs.com/2014/06/17/hya</id>
        <content type="html">
            &lt;div class='image'&gt;
            &lt;img src='http://dailyjs.com/images/posts/hya.png' /&gt;
            &lt;small&gt;A Hya session.&lt;/small&gt;
            &lt;/div&gt;
            &lt;p&gt;Cristiano Belloni has relaunched &lt;a href='http://dailyjs.com/2013/03/22/kievll-capturing/'&gt;KievII Host&lt;/a&gt; as &lt;a href='http://app.hya.io/'&gt;Hya.io&lt;/a&gt;. This is a web-based plugin-based audio application that supports hardware MIDI though &lt;a href='http://webaudio.github.io/web-midi-api/'&gt;Web MIDI&lt;/a&gt;, audio synthesis, sequencers, and lots of plugins.&lt;/p&gt;

            &lt;p&gt;The project has a &lt;a href='http://blog.hya.io/'&gt;blog&lt;/a&gt; with announcements about updates, plugins, and some technical background. The web interface is closed source, but the plugins Cristiano has written are open source. For example, &lt;a href='https://github.com/janesconference/hy-osc'&gt;hy-osc&lt;/a&gt; is an oscillator, and &lt;a href='https://github.com/janesconference/kmx'&gt;kmx&lt;/a&gt; is a mixer.&lt;/p&gt;

            &lt;p&gt;Hya supports AMD and ES6 modules. They use a simple JSON object that describes the plugin, and a constructor function. You can bind to the Hya GUI using various events, like &lt;code&gt;handleMouseOver&lt;/code&gt; and &lt;code&gt;handleMouseDown&lt;/code&gt;. The post &lt;a href='http://blog.hya.io/developing-a-canvas-plugin-for-hyacinth/'&gt;Developing a canvas plugin for Hya.io&lt;/a&gt; explains how to create plugins in detail.&lt;/p&gt;

            &lt;p&gt;&lt;a href='http://hya.io/#/docs'&gt;The documentation&lt;/a&gt; has details on MIDI interaction and the &lt;code&gt;initPlugin&lt;/code&gt; constructor. It&amp;#8217;s amazing to think that you could connect a MIDI control surface or keyboard to a web application.&lt;/p&gt;
        </content>
    </entry>

</feed>
